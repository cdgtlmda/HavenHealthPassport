openapi: 3.0.3
info:
  title: Haven Health Passport API
  description: |
    Blockchain-verified AI-powered health record management system for displaced populations.
    
    ## Authentication
    
    The API uses JWT tokens for authentication. Include the token in the Authorization header:
    ```
    Authorization: Bearer <your-token>
    ```
    
    ## Rate Limiting
    
    API calls are rate limited based on your tier:
    - Basic: 1000 calls/hour
    - Standard: 5000 calls/hour
    - Premium: 20000 calls/hour
    - Enterprise: 100000 calls/hour
    
  version: 0.1.0
  contact:
    name: Haven Health Team
    email: support@havenhealthpassport.org
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: https://api.havenhealthpassport.org/v1
    description: Production server
  - url: https://staging-api.havenhealthpassport.org/v1
    description: Staging server
  - url: http://localhost:8000/v1
    description: Development server

security:
  - bearerAuth: []
  - apiKey: []

tags:
  - name: Authentication
    description: Authentication endpoints
  - name: Patients
    description: Patient management
  - name: Health Records
    description: Health record operations
  - name: Immunizations
    description: Immunization records
  - name: Documents
    description: Document management
  - name: Blockchain
    description: Blockchain verification

paths:
  /auth/login:
    post:
      tags:
        - Authentication
      summary: User login
      operationId: login
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Successful login
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '429':
          $ref: '#/components/responses/RateLimited'

  /patients:
    get:
      tags:
        - Patients
      summary: List patients
      operationId: listPatients
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/LimitParam'
        - name: search
          in: query
          description: Search term
          schema:
            type: string
      responses:
        '200':
          description: List of patients
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PatientList'
        '401':
          $ref: '#/components/responses/Unauthorized'
    
    post:
      tags:
        - Patients
      summary: Create patient
      operationId: createPatient
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatientCreate'
      responses:
        '201':
          description: Patient created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Patient'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /patients/{patientId}:
    get:
      tags:
        - Patients
      summary: Get patient by ID
      operationId: getPatient
      parameters:
        - $ref: '#/components/parameters/PatientIdParam'
      responses:
        '200':
          description: Patient details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Patient'
        '404':
          $ref: '#/components/responses/NotFound'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    apiKey:
      type: apiKey
      in: header
      name: X-API-Key

  parameters:
    PatientIdParam:
      name: patientId
      in: path
      required: true
      description: Patient ID
      schema:
        type: string
        format: uuid
    
    PageParam:
      name: page
      in: query
      description: Page number
      schema:
        type: integer
        minimum: 1
        default: 1
    
    LimitParam:
      name: limit
      in: query
      description: Items per page
      schema:
        type: integer
        minimum: 1
        maximum: 100
        default: 20

  schemas:
    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          format: password
          minLength: 8
    
    TokenResponse:
      type: object
      properties:
        access_token:
          type: string
        refresh_token:
          type: string
        token_type:
          type: string
          default: bearer
        expires_in:
          type: integer
          description: Token expiration time in seconds
    
    Patient:
      type: object
      properties:
        id:
          type: string
          format: uuid
        unhcr_id:
          type: string
        given_name:
          type: string
        family_name:
          type: string
        birth_date:
          type: string
          format: date
        gender:
          type: string
          enum: [male, female, other, unknown]
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    
    PatientCreate:
      type: object
      required:
        - given_name
        - family_name
      properties:
        unhcr_id:
          type: string
        given_name:
          type: string
        family_name:
          type: string
        birth_date:
          type: string
          format: date
        gender:
          type: string
          enum: [male, female, other, unknown]
    
    PatientList:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/Patient'
        total:
          type: integer
        page:
          type: integer
        pages:
          type: integer
    
    Error:
      type: object
      properties:
        error:
          type: string
        message:
          type: string
        details:
          type: object

  responses:
    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    
    NotFound:
      description: Not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    
    RateLimited:
      description: Rate limit exceeded
      headers:
        Retry-After:
          description: Time to wait before retry
          schema:
            type: integer
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'