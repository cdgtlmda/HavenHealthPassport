# Vulnerability Scanning Configuration

# EventBridge Rule for ECR Scan Findings
resource "aws_cloudwatch_event_rule" "ecr_scan_findings" {
  name        = "${var.project_name}-ecr-scan-findings"
  description = "Capture ECR scan findings"

  event_pattern = jsonencode({
    source      = ["aws.ecr"]
    detail-type = ["ECR Image Scan"]
    detail = {
      scan-status = ["COMPLETE"]
      finding-severity-counts = {
        CRITICAL = [{ numeric = [">", 0] }]
        HIGH     = [{ numeric = [">", 0] }]
      }
    }
  })

  tags = var.common_tags
}

# EventBridge Target for ECR Scan Findings
resource "aws_cloudwatch_event_target" "ecr_scan_sns" {
  rule      = aws_cloudwatch_event_rule.ecr_scan_findings.name
  target_id = "SendToSNS"
  arn       = var.sns_alert_topic_arn
}

# Lambda Function for Advanced Vulnerability Processing
resource "aws_lambda_function" "vulnerability_processor" {
  filename         = "${path.module}/lambda/vulnerability-processor.zip"
  function_name    = "${var.project_name}-vulnerability-processor"
  role            = aws_iam_role.vulnerability_processor.arn
  handler         = "index.handler"
  runtime         = "python3.9"
  timeout         = 60
  memory_size     = 256

  environment {
    variables = {
      SNS_TOPIC_ARN = var.sns_alert_topic_arn
      SEVERITY_THRESHOLD = var.vulnerability_severity_threshold
    }
  }

  tags = var.common_tags
}
# IAM Role for Vulnerability Processor Lambda
resource "aws_iam_role" "vulnerability_processor" {
  name = "${var.project_name}-vulnerability-processor-role"

  assume_role_policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Action = "sts:AssumeRole"
        Effect = "Allow"
        Principal = {
          Service = "lambda.amazonaws.com"
        }
      }
    ]
  })

  tags = var.common_tags
}

# IAM Policy for Vulnerability Processor
resource "aws_iam_role_policy" "vulnerability_processor" {
  name = "${var.project_name}-vulnerability-processor-policy"
  role = aws_iam_role.vulnerability_processor.id

  policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Effect = "Allow"
        Action = [
          "ecr:DescribeImages",
          "ecr:DescribeImageScanFindings",
          "ecr:GetAuthorizationToken"
        ]
        Resource = "*"
      },
      {
        Effect = "Allow"
        Action = [
          "sns:Publish"
        ]
        Resource = var.sns_alert_topic_arn
      },
      {
        Effect = "Allow"
        Action = [
          "logs:CreateLogGroup",
          "logs:CreateLogStream",
          "logs:PutLogEvents"
        ]
        Resource = "arn:aws:logs:*:*:*"
      }
    ]
  })
}
